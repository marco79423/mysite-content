##################################################
UNIX - Shadow Password
##################################################

:date: 2013-02-16
:modified_date: 2015-08-24
:summary: Shadow Password 是什麼？這麼做有什麼好處呢？

.. rubric:: 這裡討論的內容以 FreeBSD 為主，可能會與 linux 系的不同。

簡單來說，Shadow Password 的概念就是將存放使用者密碼的檔案分為兩份，而原來那份大家平時理解的「密碼檔」裡頭其實並沒有儲存密碼，真正的密碼資訊則是存放在另一份檔案之中。

比如說在 FreeBSD 中，我們平時習慣說的「密碼檔」，也就是「/etc/passwd」，裡頭有各個使用者的資訊，
包含使用者名稱、家目錄、使用的 Shell等，但就是沒有包含密碼內容！

而真正的密碼卻是放在「/etc/master.passwd」這個檔案裡，只有 root 才有查看的權限。

也許有人會好奇－－既然 root 可以查看「/etc/master.passwd」的內容，那 root 豈不是就知道所有人的密碼了嗎？

自然不是如此，否則還有人敢使用這個系統嗎？

這裡首先要知道 FreeBSD 的密碼系統是怎麼運作的。我們可以想像對於系統來說，要怎麼確認某使用者是否是本人，最簡單的方法就是該使用者提供一組密碼，讓系統存起來。等該使用者要登入的時候，比對他提供的密碼和存放在系統的密碼是否符合即可，如果相同，那就是本人，若否，則不是本人。

但實際上，FreeBSD 並不會直接存放密碼在系統之中，而是會先密碼 hash 過才存進「/etc/master.passwd」中，也就是說這個檔案裡，其實並沒有存放任何使用者真正的密碼，而是這些密碼 hash 過的值。

當使用者要登入系統時，提供的密碼一樣會用同樣的方法 hash 過，再拿來與「/etc/master.passwd」存的密碼做比對。由於同樣的密碼 hash 的結果會相同，所以一樣也能拿來確認是否為真正的使用者。

我們這裡所說的，hash 指的是單向雜湊函式，常見的例子有 MD5 或 SHA1。這種函式的特點能將某一個字串轉換成另一串無規律的字串。而且同樣的字串轉出的內容一定會相同。這種函式最神奇的地方在於而轉出的內容很難將值轉回原來的字串。

因此這種函式非常適合用來儲存密碼，由於不同的密碼幾乎不會產生同樣的 hash 值，所以我們可以直接比對 hash 值是否相同來判斷使用者是不是打了正確的密碼。而難以轉換原來字串的特性，讓 root 雖然可以查看「/etc/master.password」看到使用者密碼 hash 後的結果，卻無法藉由這個值推算回密碼。也因此，使用者就不用擔心自己的密碼會被 root 知道。


.. note::

    但另一方面，雖然 root 不知道你的密碼為何，但 root 卻可以直接將你的密碼改成別的，畢竟 root 是神呀！


順帶一提，實際運作時，系統還會在使用者輸入新的密碼時，隨機產生一個數字(稱作 salt)，添加進密碼中一起做 hash，
所以就算是同樣的密碼，hash 出來的結果也不會相同。當然這個隨機產生的數字還是要存進去才行。

也就是說如果甲、乙兩人都用「chicken」當作密碼，也不會有相同的 hash 值。這樣的好處是如果一開始管理員就知道甲的密碼是「chicken」，他也不能藉由同樣的 hash 值猜出乙的密碼為何。

「/etc/master.passwd」儲存密碼的時候，共有三個欄位，由 $ 分隔，其格式如下::

    $id$salt$encrpted

id 指的是用什麼 hash function，若為 1 則是採用 MD5，第二個則是產生的隨機數字，最後一項才是 hash 出來的值，
詳細資訊可以查詢 crypt(3)

.. note::
    
    在「/etc/login.conf」中，可以設定要使用的 hash 函式，比如說 MD5。

    * passwd_format md5


舉例來說::

    >>>  cat /etc/master.passwd | grep marco
    marco:$1$65Y.0rv4$PLzeceW8U4rDbA2ZSorLQ0:1001:1001::0:0:marco li:/home/marco:/bin/tcsh

「那為什麼要將密碼存在另一個檔案呢？反正我也沒辦法由 hash 猜到別的使用者的密碼呀？」

理由是很多使用者的密碼……呃？怎麼說呢？所用的密碼並不會很複雜，常常就是那幾個字，所以若我可以看到密碼 hash 過後的值，我還是有機會從 hash 猜到真正的密碼是什麼。

所以為了減少發生問題的可能性，最實在的辦法就是讓使用者連看都看不到，不過話說如此，也不能把「密碼檔」的讀取權限拿掉，讓使用者看不見「密碼檔」，因為上面還包含很多資訊是要讓使用者知道的，所以就另外產生一個檔案來存放密碼，
而且這個檔案除了 root 外，其他人都看不到內容，這種把檔案分成兩個的方式就是「Shadow Password」的機制。

==================== ===========================================================
 /etc/passwd          密碼檔，包含使用者的相關資訊
 /etc/master.passwd   真正存放密碼的檔案(不同作業系統，名稱可能會不太一樣)
==================== ===========================================================

.. note:: 

    為什麼要用「Shadow Password」呢？其實真正理由我也不清楚，這裡寫的理由是我在網路上看到的一個說法，不知道是不是正確的，不過不重要，重要的是理解這套機制就行了。話說回來，對我來說好像不是一個好的理由，因為一開始就不要在密碼檔放個人資訊就好了呀？也許是「歷史遺毒」的關係吧？
